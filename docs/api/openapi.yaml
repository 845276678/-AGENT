openapi: 3.0.3
info:
  title: AI Agent Market API (Stub)
  version: 1.0.0
servers:
  - url: http://localhost:8000/v1
paths:
  /auth/login:
    post:
      operationId: authLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /agents:
    get:
      operationId: listAgents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /agents/{agentId}:
    get:
      operationId: getAgent
      parameters:
        - in: path
          name: agentId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /ideas:
    get:
      operationId: listIdeas
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
    post:
      operationId: createIdea
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /store/products:
    get:
      operationId: listProducts
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /store/cart:
    get:
      operationId: getCart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /store/cart/add:
    post:
      operationId: addToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: string }
                quantity: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /store/cart/{itemId}:
    put:
      operationId: updateCartItem
      parameters:
        - in: path
          name: itemId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
    delete:
      operationId: removeCartItem
      parameters:
        - in: path
          name: itemId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /store/purchase:
    post:
      operationId: purchase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /users/{userId}/profile:
    get:
      operationId: getUserProfile
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
    put:
      operationId: updateUserProfile
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                bio: { type: string }
                location: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /users/{userId}/wallet:
    get:
      operationId: getWallet
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /users/{userId}/wallet/deposit:
    post:
      operationId: walletDeposit
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
  /users/{userId}/wallet/withdraw:
    post:
      operationId: walletWithdraw
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEnvelope'
components:
  schemas:
    ApiEnvelope:
      type: object
      properties:
        success: { type: boolean }
        data:
          oneOf:
            - type: object
            - type: array
            - type: string
            - type: number
            - type: boolean